# Example ibis.properties file

# An ibis property file can be used to change settings of ibis. Ibis will look
# for a file named "ibis.properties" on the classpath, the current directory,
# and in the location set in the "ibis.properties.file" system property.
# Alternatively, a user can specify these properties directly as system
# properties using the -D option of java.

#This file lists properties valid for various parts of ibis
#Also listed are a description, and the default value of this property, if any

#### Generic Ibis properties ####

## String: name of the pool this ibis belongs to
# ibis.pool.name = 

## Integer: size of the pool this ibis belongs to
# ibis.pool.size = 

## Address of the central ibis server
# ibis.server.address = 

## Comma seperated list of hub addresses. The server address is appended to this list, and thus is the default hub if no hub is specified
# ibis.hub.addresses = 

## Nickname or classname of an Ibis implementation. The specified implementation is used, bypassing the automatic selection mechanism of Ibis.
# ibis.implementation = 

## Name of the property file used for the configuration of Ibis
# ibis.properties.file = 

## Path used to find Ibis implementations
# ibis.implementation.path = 

## Boolean: If true, makes Ibis more verbose, if false, does not
# ibis.verbose = false

## Set the location of Ibis. Specified as multiple levels, seperated by a '@', e.g. machine@cluster@site@grid@world. Defaults to a multilevel location with the hostname of the machine
# ibis.location = 

## Set a string that will be appended to the automatically generated location.
# ibis.location.postfix = 

## implementation of the registry. Not all Ibis implementations use this property
# ibis.registry.implementation = ibis.ipl.impl.registry.central.client.Registry



#### Ibis Central Registry properties ####

## Int(seconds): how often is a member of a pool expected to report it is still alive
# ibis.registry.central.heartbeat.interval = 120

## Int(seconds): how often does the server send out events any member may have missed
# ibis.registry.central.event.push.interval = 60

## Boolean: do we gossip, or send events centrally
# ibis.registry.central.gossip = false

## Int(seconds): how often do we gossip
# ibis.registry.central.gossip.interval = 1

## Boolean: if true, the server gossips more often if there are more nodes in a pool
# ibis.registry.central.adapt.gossip.interval = false

## Boolean: use a broadcast tree instead of serial send or gossiping
# ibis.registry.central.tree = false

## Boolean: bootstrap with peers, not just with the server
# ibis.registry.central.peer.bootstrap = true

## Int(seconds): how long do clients attempt to connect to the server and peers before giving up
# ibis.registry.central.client.connect.timeout = 120

## Int(seconds): how long does the server attempt to connect to a client before giving up
# ibis.registry.central.server.connect.timeout = 10

## Boolean: if true, a log will be kept by the registry and saved to a file
# ibis.registry.central.log = false

