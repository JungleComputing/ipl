<project
    name="native"
    default="native"
    basedir=".">

    <description>
	Target definitions for javah and native compile under the current directory.
    </description>

    <!--
	Target definition for javah.

	Requires prior inclusion of ${ibis}/build-files/build-properties.xml

	Requires definition of the following properties:
	build                  the root of the build tree to be javah'd
	default.classpath      refid of sensible default classpath
    -->

    <target name="property-javah-build" depends="property-init" unless="build">
	<echo message="build is undefined. Set it to the default value"/>
	<property name="build" location="build"/>
	<mkdir dir="${build}"/>
    </target>

    <target name="javah-init" depends="property-javah-build">
	<mkdir dir="${build}/include"/>
	<echo level="warning" message="default.classpath = ${default.classpath}"/>
	<path id="all-classes">
	    <fileset dir="${build}">
		<include name="**/*.class"/>
	    </fileset>
	</path>
	<pathconvert pathsep=" " property="classes.all" refid="all-classes">
	    <map from="${build}${file.separator}" to=""/>
	</pathconvert>
    </target>

    <target name="-chk-uptodate-NativeMethodClasses">
	<uptodate property="is-uptodate-N"
	    targetfile="${build}/NativeMethodClasses">
	    <srcfiles dir="${build}" includes="**/*.class"/>
	</uptodate>
    </target>

    <target name="-get-natives" depends="-chk-uptodate-NativeMethodClasses"
	unless="is-uptodate-N">
	<echo	level="debug"
		message="List of all class files: ${classes.all}"/>

	<java   classname="ibis.frontend.io.CheckNativeMethods"
		taskname="CheckNativeMethods"
		dir="${build}"
		output="${build}/NativeMethodClasses"
		failonerror="true"
		fork="true">
	    <arg line="${classes.all}"/>
	    <classpath refid="default.classpath"/>
	</java>
    </target>

    <target name="find-natives"
	depends="javah-init, -get-natives"/>

    <target name="find-classes-native">
	<loadfile
		property="classes.native"
		srcFile="${build}/NativeMethodClasses">
	    <!--
	    <filterchain>
		<prefixlines prefix=","/>
		<striplinebreaks/>
	    </filterchain>
	    -->
	</loadfile>
	<echo level="verbose" message="classes.native = ${classes.native}"/>
    </target>

    <target name="do-classes-native" depends="find-classes-native"
	if="classes.native">
	<javah class="${classes.native}"
	    destdir="${build}/include">
	    <classpath refid="default.classpath"/>
	</javah>
    </target>

    <target name="javah"
	depends="find-natives,do-classes-native"/>


    <!--
	Target to Compile natives in this directory

	Requires prior definition of following properties:
	    native.dir		the directory of this build
	    ibis		the root of the ibis source tree
	    build		the root of the ibis build tree
	    default.classpath	a ref property with default classpath

	The shared target definitions require you to define:
	    local.includes	a property that contains include paths specific
				to this module

	Optional:
	    local.lib		the truncated name of the lib you want to create

    -->


    <target name="set-c-debug-false" unless="c.debug">
	<property name="c.debug.value" value="false"/>
    </target>

    <target name="set-c-debug-true" if="c.debug">
	<property name="c.debug.value" value="true"/>
    </target>

    <target name="set-c-debug"
	depends="set-c-debug-false,set-c-debug-true"/>

    <target name="set-c-optimize-mac" if="c.optimization">
	<property name="c.optimize" value="${c.optimize.mac}"/>
    </target>

    <target name="set-mac-compiler" if="os-is-mac"
	depends="set-c-optimize-mac">
	<property name="c.compiler" value="${c.compiler.mac}"/>
    </target>

    <target name="set-c-optimize-unix" if="c.optimization">
	<property name="c.optimize" value="${c.optimize.unix}"/>
    </target>

    <target name="set-unix-compiler" if="os-is-unix"
	depends="set-c-optimize-unix">
	<property name="c.compiler" value="${c.compiler.unix}"/>
    </target>

    <target name="set-c-optimize-windows" if="c.optimization">
	<property name="c.optimize" value="${c.optimize.windows}"/>
    </target>

    <target name="set-windows-compiler" if="os-is-windows"
	depends="set-c-optimize-windows">
	<property name="c.compiler" value="${c.compiler.windows}"/>
    </target>

    <target name="set-compiler"
	depends="set-mac-compiler,set-unix-compiler,set-windows-compiler"/>

    <target name="property-compiler-init"
	depends="set-c-debug, set-compiler" unless="property-compiler-init-done">
	<property name="property-compiler-init-done" value="true"/>
	<path id="cpp">
	    <pathelement path="${ibis}/3rdparty/cpptasks-1.0-cvs.jar"/>
	</path>
	<taskdef resource="cpptasks.tasks" classpathref="cpp" loaderref="org.apache.tools.ant.loader.AntClassLoader2"/>
	<typedef resource="cpptasks.types" classpathref="cpp" loaderref="org.apache.tools.ant.loader.AntClassLoader2"/>
	<!--
	<taskdef resource="cpptasks.tasks" classpathref="cpp"/>
	<typedef resource="cpptasks.types" classpathref="cpp"/>
	-->
    </target>

    <target name="property-native-outtype"
	    depends="property-init"
	    unless="cc.outtype">
	<echo	level="debug"
		message="cc.outtype is undefined. Set it to the default value"/>
	<property name="cc.outtype" value="shared"/>
    </target>

    <target name="property-native-build"
	    depends="property-init"
	    unless="build">
	<echo	level="debug"
		message="build is undefined. Set it to the default value"/>
	<property name="build" location="build"/>
    </target>

    <target name="property-native-local.lib" unless="local.lib">
	<echo message="local.lib is undefined. Set it to the default value"/>
	<property name="local.lib" value="ibis"/>
    </target>

    <target name="native-init"
	    depends="property-native-build,
		     property-native-local.lib,
		     property-native-outtype,
		     proprietary-tasks,
		     property-compiler-init" unless="native-initialized">
	<property name="native-initialized" value="true"/>
	<mkdir dir="${build}"/>
	<mkdir dir="${build}/include"/>
	<mkdir dir="${ibis}/lib"/>
	<mkdir dir="${ibis}/lib/natives"/>

	<path id="default.includes-ref">
	    <pathelement path="${JAVA_HOME}/include"/>
	    <pathelement path="${JAVA_HOME}/include/linux"/>
	    <pathelement path="${JAVA_HOME}/include/win32"/>
	    <pathelement path="${JAVA_HOME}/include/solaris"/>
	    <pathelement path="${JAVA_HOME}/../1.3.1/Headers"/>
	    <pathelement path="${build}/include"/>
	    <pathelement path="${native.dir}"/>
	</path>
	<property name="default.includes" refid="default.includes-ref"/>

	<echo	message="native.dir = ${native.dir}"
		level="verbose"/>
	<echo message="default.includes = ${default.includes}"
		level="verbose"/>
	<pathconvert pathsep=" " property="native-path">
	    <path>
		<pathelement path="${native.dir}"/>
	    </path>
	    <map from="${ibis}${file.separator}" to=""/>
	</pathconvert>

	<pathconvert pathsep=" " property="native-rel-path">
	    <path>
		<pathelement path="${native.dir}"/>
	    </path>
	    <map from="${ibis}${file.separator}src${file.separator}" to=""/>
	</pathconvert>

	<echo level="verbose" message="native-path ${native-path}"/>
	<echo level="verbose" message="native-rel-path ${native-rel-path}"/>

	<mkdir dir="${build}/${native-rel-path}"/>

	<!--
	    Do regexp from ${native-path} -> ${package}
		%s/\${file.separator}/_/g
		%s/^/ibis_/
	-->
	<property
		name="native-package"
		location="${build}/${native-rel-path}/package"/>
	<echo message="${native-path}" file="${native-package}"/>
	<replaceregexp
		byline="true"
		file="${native-package}"
		flags="g"
		match="\${file.separator}"
		replace="_"/>
	<replaceregexp
		byline="true"
		file="${native-package}"
		match=""
		replace="ibis_"/>
	<loadfile
		property="package"
		srcFile="${native-package}"/>

	<property name="local.lib" value="${package}"/>

	<taskdef
		name="maplibrary"
		classname="MapLibraryName"
		classpath="${ibis}/ant-tasks/tasks"/>

	<condition property="local.libsetref">
	    <isreference refid="local.libset-ref"/>
	</condition>

	<maplibrary property="library.path" name="${ibis}/lib/natives/${local.lib}"/>

    </target>

    <target name="do-local-libset-ref" if="local.libsetref">
	<property name="local.libset" refid="local.libset-ref"/>
	<!--
	<echo message="Specify extra libs ${local.libset}"/>
	<echo message="Specify extra libs ref ${local.libset-ref}"/>
	-->
    </target>

    <target name="chk-uptodate">
	<uptodate property="is-uptodate" targetfile="${library.path}">
	    <srcfiles dir="${native.dir}" includes="*.c"/>
	</uptodate>
    </target>

    <target name="do-cc" depends="chk-uptodate" unless="is-uptodate">
	<echo message="Invoke cc in ${native.dir}${file.separator}"/>

	<cc	debug="${c.debug}"
		objdir="${build}/${native-rel-path}"
		outfile="${ibis}/lib/natives/${local.lib}"
		outtype="${cc.outtype}"
		libtool="${use-libtool}"
		name="${c.compiler}"			
		warnings="severe">
	    <fileset dir="${native.dir}" includes="*.c" unless="native.src"/>
	    <fileset dir="${native.dir}" includes="${native.src}" if="native.src"/>
	    <defineset>
		<define name="NDEBUG" if="c.optimize"/>
	    </defineset>
	    <compilerarg value="${c.optimize}" if="c.optimize"/>
	    <includepath>
		<pathelement path="${local.includes}"/>
		<pathelement path="${default.includes}"/>
	    </includepath>
	    <libset refid="local.libset-ref" if="local.libset"/>
	    <!-- <compilerarg location="mid" value="-E"/> -->
	    <!-- <compilerarg location="mid" value="-v"/> -->
	</cc>
    </target>

    <target name="set-outtypes" if="os-is-mac">
	<condition property="is-shared-outtype">
	    <equals arg1="${cc.outtype}" arg2="shared"/>
	</condition>
	<condition property="is-plugin-outtype">
	    <equals arg1="${cc.outtype}" arg2="plugin"/>
	</condition>
    </target>

    <target name="cpy-dylib" if="is-shared-outtype">
	<pathconvert pathsep=" " property="mac-lib">
	    <path>
		<pathelement path="${library.path}"/>
	    </path>
	    <map from=".jnilib" to=".dylib"/>
	</pathconvert>
	<copy file="${mac-lib}" tofile="${library.path}"/>
    </target>

    <target name="cpy-bundle" if="is-plugin-outtype">
	<pathconvert pathsep=" " property="mac-lib">
	    <path>
		<pathelement path="${library.path}"/>
	    </path>
	    <map from=".jnilib" to=".bundle"/>
	</pathconvert>
	<copy file="${mac-lib}" tofile="${library.path}"/>
    </target>


    <target name="do-compile" depends="do-cc, set-outtypes, cpy-dylib, cpy-bundle"/>

    <!--
	Invoke this target to compile the .c files in the current
	directory
    -->
    <target name="native"
	depends="native-init, do-local-libset-ref, do-compile"/>

    <target name="proprietary-tasks" unless="native-initialized">
	<mkdir dir="${ibis}/ant-tasks/tasks"/>
	<javac
		srcdir="${ibis}/ant-tasks"
		destdir="${ibis}/ant-tasks/tasks">
	    <include name="**/*.java"/>
	    <classpath refid="default.classpath"/>
	</javac>
    </target>
</project>
