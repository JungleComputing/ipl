Legend:
- = current
+ = done since last core meeting (or not removed ...)
* = new/changed since last core meeting
? = suggestion, still needs to be discussed

TODO: Update TODO (my bad, Niels)

Ibis:
- check properties for unknown properties
- while(true) {fix eclipse warnings}
- more efficient clone? Maybe generate code that clones without using 
  serialization. Could be done for objects passed as a param
  to a spawn, for instance. If code is not there, fall back to current impl.
? throw nested exception ending with failed ibis instead of just the failed Ibis?

packaging/distribution:
- clean-up project (names) in subversion repository
- split up ibis in multiple separate subprojects:
	- standalone applications (DFA, SAT4Satin, Barnes)	
	- make external dir in every subproject so that each subproject
	  is self-contained.
	- programming model applications
- change Satin to "new" build method for programming models
- rename satin-ibis, barnes* and ibis-io in repository
	
ibis registry:
- gossip Registry
- print better error messages when the registry cannot be reached or the
  server is not started

website:
- update subproject pages:
    - Satin
    - Mpj
    - Gmi
    - Rmi
    - JavaGAT
    - SmartSockets

implementations:
- fix/improve performance of MpiIbis
- Implement multi Ibis.
- Implement LRMC Ibis
    opmerking over cluster aware LRMC:
       Ik heb er nu even een compare van de toString van de location van
       gemaakt. Lijkt te werken. Maar eigenlijk moet het misschien maar een
       soort for loop over alle levels in de location worden denk ik.

       Yup. Iets als 'van groot naar klein' en eruit breaken als er een verschil
       is. Net als bij DNS zal ik maar zeggen. Voor elk van de levels kan je dan
       gewoon die compare van toString doen...


- benchmark serialisation. Especially focus on the performance gain when
  rewriting the classlibs. This functionality is rather tricky, if it doesn't
  gain us anything anymore, we might as well remove it.

applications:
- check results of the different barnes versions

deployment/testing/benchmarking:
- implement "Ibis deployment application" using the GAT
- implement GUI/Scripting/Shell/Commandline interface on Ibis deployment app
- reimplement codmon on-top-of the GAT
- change codmon performance measurements to "sane" benchmarks


satin:
- measure cost of sucessful and unsucessful steal attempts seperately
- add semantic analysis to the compiler
- forgotten sync statements
- make return / throw an implicit sync again?
- add comments to abort / inlet machinism
- shutdownhook -> System.exit
- satinc does not understand monitorenter/monitor exit instructions (othello)
- detection of what is an inlet: now, if the invocation is inside a try-catch
  it is assumed to be an inlet. Is this OK? (Maybe change to checked Exception)
- ant test should also run satin apps sequentially
  (It does, does'nt it? (Ceriel) No, it does not run non-rewritten code)
- investigate invocation record cache again. It makes a huge difference for
  performance of small tasks. The fact that it does not seem to work is an
  indication that there is a bug somewhere: someone touches an invocation
  record after it has been cleared!
- update docs: don't call System.exit at the end of main(). Satin should be
  allowed to terminate normally. If main() calls exit, fault-tolerance will
  think that the master died, and restart the master on another node!
  Or: could the Satin rewriter somehow deal with this? Or: shutdown hook?
- Bug: If the user "main" exits before all satin instances are fully
  initialized satin doesn't exit properly.

satin-so:
- count all messages+sizes for the total messages/data sent statistics --Rob
- do not send the same object (and the same version) twice.
  This can happen if it is both broadcast, and pulled at the same time --Rob
- Allow shared objects to be passed anywhere in the parameter data 
  structures. Now only directly as a param. Maybe use stubs instead of
  direct access? This would make the implementation much easier --Rob
- message combining does not help because:  (--Rob)
    - object-id is sent every time (long string)
    - combiner is synchronized
    - overhead of method calls, serialization
