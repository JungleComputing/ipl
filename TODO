*** Website ***

- change UDP in documentation picture to being incomplete (striped)

*** Plugtest ***

- Gossip Registry
- make it possible to monitor (parts of) ibis.

*** Ibis 2.0+ ***

general:

- enableResizeUpcalls: do not wait until own join has been seen, or add
  one that does not wait.
- to think about: would it be a good idea to allow an active upcall per
  connection instead of per receiveport? This would make satin more simple:
  no longer a receiveport per sender.
- split up ibis.jar in multiple files (in a sane manner)
- move applications to a real tree, use packages.
- steering interface
- while(true) {fix eclipse warnings}
- change codmon performance measurements to "sane" benchmarks
- more efficient clone? Maybe generate code that clones without using 
  serialization. Could be done for objects passed as a param
  to a spawn, for instance. If code is not there, fall back to current impl.
- migrate leftover prints to log4j (should we? Performance!)
  (Ceriel: did Ibis implementation).
- improve performance of Ibis serialization for non-rewritten code.
- automatically started nameserver hangs when application crashes or exits
  with code 1 (with ant test)
- na een connectionLost upcall geeft het sluiten van de port soms:
    Trying to close a sendport port while a message is alive!
  Dat is natuurlijk zo, maar ja, de connectie is weg, dus dan zou je willen
  dat de close gewoon netjes zonder exception terug komt. --Rob
- tot nu toe was het zo dat als je connection downcalls had bij de sendport,
  writes geen exception geven. Vind ik eigenlijk een slecht idee, en stel dan
  ook voor om writes alleen geen exception te laten geven als je
  connectionUpcalls hebt (Ceriel).

nameserver+connection stuff:
- add out-of-band communication support to the Nameserver interface

ipl:

- IPL += sendPort.connect(ReceivePortIdentifier[] receivers);
- close van poorten (in shutdownhooks)
  docs vertellen niet dat je niet een close mag doen terwijl een message
  levend is
  Ceriel: ??? Hoe doe je dat (in een shutdownhook belanden als er een message
  levend is ??? En, de javadocs vertellen dat wel degelijk.
- change Ibis.toString() to returning a "friendly"(user-printable), but not 
  necessarily unique, string.
 
satin:
- if main throws an exception, we exit with code 0. Ant test also succeeds.
- add semantic analysis to the compiler
- forgotten sync statements
- make return / throw an implicit sync again?
- add comments to abort / inlet machinism
- check satin caches.
- shutdownhook -> System.exit
- satinc does not understand monitorenter/monitor exit instructions (othello)
- detection of what is an inlet: now, if the invocation is inside a try-catch
  it is assumed to be an inlet. Is this OK? (Maybe change to checked Exception)
- shared objects model: no stubs are used. -> write methods on the orignal object
  are not broadcast. Only if you get it as param from a spawn it is broadcast!
  This is very confusing --Rob
- ant test should also run satin apps sequentially
  (It does, does'nt it? (Ceriel) No, it does not run non-rewritten code)
- investigate invocation record cache again. It makes a huge difference for
  performance of small tasks. The fact that it does not seem to work is an
  indication that there is a bug somewhere: someone touches an invocation
  record after it has been cleared!
- update docs: don't call System.exit at the end of main(). Satin should be
  allowed to terminate normally. If main() calls exit, fault-tolerance will
  think that the master died, and restart the master on another node!
  Or: could the Satin rewriter somehow deal with this?
- Bug: If the user "main" exits before all satin instances are fully
  initialized satin doesn't exit properly.

satin-so:
- count all messages+sizes for the total messages/data sent statistics --Rob
- do not send the same object (and the same version) twice.
  This can happen if it is both broadcast, and pulled at the same time --Rob
- Allow shared objects to be passed anywhere in the parameter data 
  structures. Now only directly as a param. Maybe use stubs instead of
  direct access? This would make the implementation much easier --Rob
- message combining does not help because:  (--Rob)
    - object-id is sent every time (long string)
    - combiner is synchronized
    - overhead of method calls, serialization
- remove export of shared object from interface. An application can mark any
  initialization functions as being write functions for the same nett result.

abstract implementation:
- check _all_ properties in _every_ Ibis
- add support for properties in a ".ibis" config file
- if closed.world is selected, check if ibis.pool.hosts is set, and ignore
  joins beyond total hosts, and all leaves.

implementations:
- (re)implement MPIIbis
- implement stacking Ibis

connect stuff:
- use routed messages *while* trying to setup TCP splicing in the background
- write a good anyTCP for control_links -Rob
- support universal plug and play

apps:
- check results of the different barnes versions
