*** Website ***

- change UDP in documentation picture to being incomplete (striped)

*** Plugtest ***

- Gossip Registry
- parse "classic" ip-address:port strings in smart-sockets (e.g. nameserverclient)
- instead of TcpIbisIdentifier extends IbisIdentifier make IbisIdentifier final and
  include a byte array for the Ibis implementation specific information. This makes
  it easier for the nameserver to use not-known ibisses without duplicating all the "generic"
  data such as name, cluster, etc.
- make pools explicit in the registry (ibis.getpool() etc)
- make it possible to monitor (parts of) ibis.

*** Ibis 2.0+ ***

general:
- extend clusters to a hierarchical model:
     e.g., world.grid5k.sophia.machine321
- to think about: would it be a good idea to allow an active upcall per
  connection instead of per receiveport? This would make satin more simple:
  no longer a receiveport per sender.

- ibisidentifier -> Comparable (for Ana)
- run central nameserver on fs0
- split up ibis.jar in multiple files (in a sane manner)
- move applications to a real tree, use packages.
- network(cluster) simulator
- steering interface
- remove deprecated functionality
- while(true) {fix eclipse warnings}
- change codmon performance measurements to "sane" benchmarks
- more efficient clone? Maybe generate code that clones without using 
  serialization. Could be done for objects passed as a param
  to a spawn, for instance. If code is not there, fall back to current impl.
- migrate leftover prints to log4j (should we? Performance!)
- improve performance of Ibis serialization for non-rewritten code.
- automatically started nameserver hangs when application crashes or exits
  with code 1 (with ant test)

- na een connectionLost upcall geeft het sluiten van de port soms:
    Trying to close a sendport port while a message is alive!
    Dat is natuurlijk zo, maar ja, de connectie is weg, dus dan zou je willen dat
    de close gewoon netjes zonder exception terug komt. --Rob

nameserver+connection stuff:
- add out-of-band communication support to the Nameserver interface

ipl:

- make ibis.ipl.Ibis an interface
- add abstract classes for all classes in ibis.ipl to ibis.impl
- Ceriel: if there still remain classes in ibis.ipl, they should be final
  (except for exceptions, of course :-)
- add a final class ibis.ipl.IbisFactory which calls ibis.impl.IbisFactory
  with reflection. It shouldn't import ibis.impl.IbisFactory as this would make
  the ipl depend on ibis.impl (and ibisUtil, and IbisConnect, and....
- IPL += sendPort.connect(ReceivePortIdentifier[] receivers);
- close van poorten (in shutdownhooks)
  docs vertellen niet dat je niet een close mag doen terwijl een message
  levend is
  Ceriel: ??? Hoe doe je dat (in een shutdownhook belanden als er een message
  levend is ??? En, de javadocs vertellen dat wel degelijk.
- change Ibis.toString() to returning a "friendly"(user-printable), but not 
  necessarily unique, string.
- join numbering: each Ibis instance gets a join number tag.
  
satin:
- if main throws an exception, we exit with code 0. Ant test also succeeds.
- add semantic analysis to the compiler
- forgotten sync statements
- make return / throw an implicit sync again?
- add comments to abort / inlet machinism
- check satin caches.
- shutdownhook -> System.exit
- satinc does not understand monitorenter/monitor exit instructions (othello)
- detection of what is an inlet: now, if the invocation is inside a try-catch
  it is assumed to be an inlet. Is this OK? (Maybe change to checked Exception)
- shared objects model: no stubs are used. -> write methods on the orignal object
  are not broadcast. Only if you get it as param from a spawn it is broadcast!
  This is very confusing --Rob
- ant test should also run satin apps sequentially
  (It does, does'nt it? (Ceriel) No, it does not run non-rewritten code)

satin-so:
- count all messages+sizes for the total messages/data sent statistics --Rob
- do not send the same object (and the same version) twice.
  This can happen if it is both broadcast, and pulled at the same time --Rob
- Allow shared objects to be passed anywhere in the parameter data 
  structures. Now only directly as a param. Maybe use stubs instead of
  direct access? This would make the implementation much easier --Rob
- message combining does not help because:  (--Rob)
    - object-id is sent every time (long string)
    - combiner is synchronized
    - overhead of method calls, serialization
- remove export of shared object from interface. An application can mark any
  initialization functions as being write functions for the same nett result.

abstract implementation:
- check _all_ properties in _every_ Ibis
- add support for properties in a ".ibis" config file
- if closed.world is selected, check if ibis.pool.hosts is set, and ignore
  joins beyond total hosts, and all leaves.

implementations:
- (re)implement MPIIbis
- implement stacking Ibis

connect stuff:
- use routed messages *while* trying to setup TCP splicing in the background
- write a good anyTCP for control_links -Rob
- support universal plug and play

apps:
- check results of the different barnes versions
