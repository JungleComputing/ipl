/* $Id$ */

package ibis.ipl;

import java.io.IOException;
import java.io.PrintStream;
import java.util.Properties;

/**
 * An instance of this interface can only be created by the
 * {@link ibis.ipl.IbisFactory#createIbis(CapabilitySet, CapabilitySet,
 * Properties, RegistryEventHandler)} method, and is the starting point
 * of all Ibis communication.
 */
public interface Ibis extends Managable {

    /**
     * When running closed-world, returns the total number of Ibis instances
     * involved in the run. Otherwise returns -1.
     * @return the number of Ibis instances
     * @exception NumberFormatException is thrown when the property
     *   ibis.pool.total_hosts is not defined or does not represent a number.
     * @exception IbisConfigurationException is thrown when this is not a
     * closed-world run.
     */
    public int totalNrOfIbisesInPool();

    /**
     * When running closed-world, wait for all Ibis instances
     * involved in the run.
     * @exception IbisConfigurationException is thrown when this is not a
     * closed-world run, or when registry events are not enabled yet.
     */
    public void waitForAll();

    /**
     * Allows reception of {@link ibis.ipl.RegistryEventHandler RegistryEventHandler}
     * upcalls.
     */
    public void enableRegistryEvents();

    /**
     * Disables reception of
     * {@link ibis.ipl.RegistryEventHandler RegistryEventHandler} upcalls.
     */
    public void disableRegistryEvents();

    /**
     * Returns all Ibis recources to the system.
     * @exception IOException is thrown when an error occurs.
     */
    public void end() throws IOException;

    /**
     * Creates a {@link ibis.ipl.PortType PortType}.
     * Port capabilities are specified (for example ports are "OneToOne",
     * with "Object serialization").
     * If no capabilities are given, the capabilities that were
     * requested from the Ibis implementation are used.
     * The capabilities define the <code>PortType</code>.
     * If two Ibis instances want to communicate, they must both
     * create a <code>PortType</code> with the same capabilities.
     * A <code>PortType</code> can be used to create
     * {@link ibis.ipl.ReceivePort ReceivePorts} and
     * {@link ibis.ipl.SendPort SendPorts}.
     * Only <code>ReceivePort</code>s and <code>SendPort</code>s of
     * the same <code>PortType</code> can communicate.
     * Any number of <code>ReceivePort</code>s and <code>SendPort</code>s
     * can be created on a JVM (even of the same <code>PortType</code>).
     * </p>
     * @param p capabilities of the porttype.
     * @return the porttype.
     * @exception ibis.ipl.IbisConfigurationException if the required 
     * capabilities do not match the capabilities as specified when creating
     * the Ibis instance.
     */
    public PortType createPortType(CapabilitySet p);

    /**
     * Creates a {@link ibis.ipl.PortType PortType}.
     * See {@link #createPortType(CapabilitySet)}.
     * Also sets some properties for this porttype.
     *
     * @param p capabilities of the porttype.
     * @param tp some properties for this port type.
     * @return the porttype.
     * @exception ibis.ipl.IbisConfigurationException if the required
     * capabilities do not match the capabilities as specified when creating
     * the Ibis instance.
     */
    public PortType createPortType(CapabilitySet p, Properties tp);

    /** 
     * Returns the Ibis {@linkplain ibis.ipl.Registry Registry}.
     * @return the Ibis registry.
     */
    public Registry registry();

    /**
     * Returns the capabilities of this Ibis implementation.
     * @return the capabilities of this Ibis implementation.
     */
    public CapabilitySet capabilities();

    /**
     * Polls the network for new messages.
     * An upcall may be generated by the poll. 
     * There is one poll for the entire Ibis, as this
     * can sometimes be implemented more efficiently than polling per
     * port. Polling per port is provided in the receiveport itself.
     * @exception IOException is thrown when a communication error occurs.
     */
    public void poll() throws IOException;

    /**
     * Returns an Ibis {@linkplain ibis.ipl.IbisIdentifier identifier} for
     * this Ibis instance.
     * An Ibis identifier identifies an Ibis instance in the network.
     * @return the Ibis identifier of this Ibis instance.
     */
    public IbisIdentifier identifier();

    /**
     * Returns the current Ibis version.
     * @return the ibis version.
     */
    public String getVersion();

    /**
     * May print Ibis-implementation-specific statistics.
     * @param out the stream to print to.
     */
    public void printStatistics(PrintStream out);

    /**
     * Returns the properties as provided when instantiating Ibis.
     * @return the properties.
     */
    public Properties properties();

    /**
     * Returns the Ibis instances that joined the run.
     * Returns the changes since the last joinedIbises call,
     * or, if this is the first call, all Ibis instances that joined.
     * This call only works if this Ibis is configured to support
     * resize downcalls.
     * If no Ibis instances joined, an array with 0 entries is returned.
     * @exception IbisConfigurationException is thrown when the port was
     * not configured to support resize downcalls.
     * @return the joined Ibises.
     */
    public IbisIdentifier[] joinedIbises();

    /**
     * Returns the Ibis instances that left the run (or died).
     * Returns the changes since the last leftIbises call,
     * or, if this is the first call, all Ibis instances that left.
     * This call only works if this Ibis is configured to support
     * resize downcalls.
     * If no Ibis instances left, an array with 0 entries is returned.
     * @exception IbisConfigurationException is thrown when the port was
     * not configured to support resize downcalls.
     * @return the left Ibises.
     */
    public IbisIdentifier[] leftIbises();
}
