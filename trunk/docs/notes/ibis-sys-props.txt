#############################################################################
#
# This file contains all (or at least most) of the system properties that are
# currently recognized by (parts of) Ibis.
# Ibis by default tries to read properties from a file ibis.properties in
# the users home directory, and also from a file with the same name in the
# current directory. In addition, properties can be passed on to Java with
# the -D flag.
#
#############################################################################

#####
# IPL
#####

# Name of the Ibis implementation to be chosen.
# ibis.name

# Serialization: either "sun" or "ibis".
# ibis.serialization

# When set, represents an additional properties file to read.
# ibis.properties.file

# When set, indicates a path from where to load native libraries.
# ibis.library.path

# Path used to find Ibis implementations. This path may include directories,
# in which case all jar files in this directory are included.
# The default is the classpath.
# ibis.impl.path

# Gives verbosity during the Ibis startup.
# ibis.verbose:			false

############
# Registry
############

# Name of the registry class to be used.
# ibis.registry.impl:		ibis.impl.registry.central.Registry

# Host/port on which the registry server is supposed to run.
# ibis.registry.serverHost:     localhost:9826

# A poolId which is supposed to be unique for this run.
# ibis.registry.pool:           DEFAULT

# The next few properties are only used by the registry server (or the
# server startup program).

# Name of the registry server class to be used. Note: this must match the
# client.
# ibis.registry.server.impl:    ibis.impl.registry.central.Server

# Port number on which the registry server is supposed accept connections.
# Only read by the registry server! Registries should use ibis.registry.serverHost.
# ibis.registry.server.port:    9826

# Only serve a single run.
# ibis.registry.server.single:  false

# The next few properties are specific for the "central" registry.

# ibis.registry.central.smartSockets:  true
# ibis.registry.central.gossip:        false
# ibis.registry.central.keepNodeState: false
# ibis.registry.central.serverConnectTimeout: false

#############################################################################
#
# Ibis implementations
#
#############################################################################

##########
# NIO Ibis
##########

# Allows the user to choose between different sendport implementations.
# possible values are "Blocking", "NonBlocking", and "Thread".
# The default depends on the presence of the "CONNECTION_ONE_TO_MANY" 
# capability, so the property is not set here.
# ibis.nio.spi:

# Allows the user to choose between different receiveport implementations.
# possible values are "Blocking", "NonBlocking", and "Thread".
# The default depends on the presence of the "CONNECTION_MANY_TO_ONE"
# capability, so the property is not set here.
# ibis.nio.rpi:

#############################################################################
#
# Ibis utilities
#
#############################################################################

#########
# IpUtils
#########

# When set, this is the IP address given when a host requests its own
# IP address. This is sometimes needed when a host has several external IP
# addresses, or has special networks available through different IP addresses.
# ibis.util.ip.address

# When set, this is the IP address given when a host requests its own IP
# address for communicating with a nameserver or poolinfoserver.
# ibis.util.ip.alt-address

#########
# Monitor
#########

# Enable assertions in ibis.util.Monitor.
# ibis.util.monitor.assert		false

# Enable statistics in ibis.util.Monitor.
# ibis.util.monitor.stats		false

##########
# PoolInfo
##########

# Must be present when using a PoolInfo, and in this case must contain 
# the total number of hosts involved in the run.
# ibis.pool.total_hosts

# Must contain a space-separated list of hostnames. The number of hostnames in
# the list must at least be equal to the number of hosts involved in the run as
# given by the ibis.pool.total_hosts property. Any additional host names are
# ignored.
# ibis.pool.host_names

# Optional property, gives the index of the current host in the list of host
# names. Should be between 0 and ibis.pool.total_hosts (inclusive).
# If not supplied, it is determined by looking up the current host in
# the list of host names.
# ibis.pool.host_number

# Cluster name of the current node.
# ibis.pool.cluster			unknown

# Contains the poolId identifying the current run. If not present, the
# poolId from the nameserver is tried (ibis.registry.pool). If that is
# not present either, "unknown" is used.
# ibis.pool.pool			unknown

# Must contain the port number on which the <code>PoolInfoServer</code>
# is accepting connections. If not present, ibis.registry.port
# is tried. If present, 1 is added and that is used as port number. If not,
# the default is used.
# ibis.pool.server.port			9827
 
# Must contain the hostname of the host on which the PoolInfoServer runs.
# ibis.pool.server.host

# If set to true, have the PoolInfoServer only accept a single registration
# for each node (multiple Ibis instances on the same node won't work).
# Remove???
# ibis.pool.single			false

#############################################################################
# Ibis I/O
#############################################################################

# Enables statistics about the use of classes that have not been rewritten
# in Ibis serialization.
# ibis.io.stats.nonrewritten		false

# Enables statistics about the objects sent in Ibis serialization.
# ibis.io.stats.written			false

# Allows the user to specify an additional class loader for Ibis serialization.
# ibis.io.serialization.classloader

# Enables timers for data and Ibis serialization.
# ibis.io.serialization.timer

# When set to true, data serialization and ibis serialization no longer
# save all writes of a basic type to an array. These calls are passed on
# to the layer below instead.
# ibis.io.noarraybuffers		false

# Possible values for ibis.io.conversion are: hybrid, chunk, wrap, simple.
# Its value determines the way arrays of basic types are converted to bytes.
# With "simple", each element is converted using shifts and bit-wise ands.
# With "chunk", NIO is used to convert chunks of the array at a time.
# With "wrap", the NIO "wrap" method is used when the size is larger than
# the internal buffer size. With "hybrid", "simple" is used for small arrays,
# "chunk" is used for larger arrays.
# ibis.io.conversion			hybrid

# When set to true, data serialization and ibis serialization use buffers
# from a cache instead of allocating new ones when the flushed ones cannot
# be re-used yet. This only makes some sense (although it does not improve
# performance) with MessagePassing Ibis, because with all other Ibis
# implementations, the buffers can be re-used after a flush.
# Maybe just remove???
# ibis.io.allocator			false

# Maximum number of buffers to cache when ibis.io.allocator is set to true.
# ibis.io.allocator.size

# Statistics for the buffer-caching allocator.
# ibis.io.allocator.statistics		false

# To be replaced by a log4j logger.
# ibis.io.debug				false

# Enable some assertions in the serialization code.
# ibis.io.assert			false

# When writing arrays of a basic type that are smaller than this size
# (in bytes), the elements are written one by one, when using data or ibis
# serialization. It is not a good idea to fiddle with this, as this changes
# the wire format.
# ibis.io.smallarraybound		256

# Enable assertions in the Ibis hash table (which is used in Ibis
# serialization).
# ibis.io.hash.assert			false

# Enable statistics in the Ibis hash table (which is used in Ibis
# serialization).
# ibis.io.hash.stats			false

# Enable timers in the Ibis hash table (which is used in Ibis serialization).
# ibis.io.hash.timings			false
