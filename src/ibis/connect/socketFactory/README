How to plug in a new socket type.

Go to the ibis/src/ibis/connect/socketFactory directory. In this
directory, you will find a socket factory with several socket types.
Ibis uses two types of connections: control links and data links.
Control links are mainly used for connection setup, the actual communication
is done through data links.

For control links, you should use PlainTCP if possible. If this is not
possible, you can either use RoutedMessages (which uses a controlhub,
and communicates with it using sockets, and is slow), or your own socket
type, which must then implement the ClientServerSocketFactory interface.
Control links are only used for connection setup, so their being slow
is not that much of an issue.

For data links, you must implement the BrokeredSocketFactory interface.
Below is an incomplete sample for a socket type that implements both.
This is suitable for socket implementations that extend java.net.ServerSocket
and java.net.Socket.
You may also have a look at the PlainTCPSocketType implementation
(from which this sample is derived).

In addition, you must add a nickname for your socket implementation
in ExtSocketFactory.java, look for the line "// Declare new nicknames here.".

Once you have done all that, you can run TCP Ibis using your own socket
type. Use the following flags to java:

-Dibis.connect.control_links=PlainTCP -Dibis.connect.data_links=<your nickname>

Now, Ibis should use your socket type.

Here is the socket type sample:

package ibis.connect.socketFactory;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;


public class MySocketType extends SocketType 
    implements ClientServerSocketFactory, BrokeredSocketFactory
{
    public MySocketType() { super("My"); }

    public Socket createClientSocket(InetAddress addr, int port)
	throws IOException
    {
	// TODO, use your method for creating a client socket that connects
	// to the server socket listening to the specified port at the
	// specified address.
	return null;
    }

    public ServerSocket createServerSocket(InetSocketAddress addr, int backlog)
	throws IOException
    {
	// TODO, use your method for creating a server socket listening
	// at the specified address, with the specified backlog.
	return null;
    }

    public Socket createBrokeredSocket(InputStream in, OutputStream out,
				       boolean hintIsServer,
				       ConnectProperties p)
	throws IOException
    {
	// Here, you can use the specified input stream and output stream
	// to negociate. In this example, the server side sends its address
	// and port to the client side, which can then create a client socket.
	Socket s = null;
	if(hintIsServer) {
	    ServerSocket server = createServerSocket(new InetSocketAddress(InetAddress.getLocalHost(), 0), 1);
	    ObjectOutputStream os = new ObjectOutputStream(new BufferedOutputStream(out));
	    os.writeObject(server.getInetAddress());
	    os.writeInt(server.getLocalPort());
	    os.flush();
	    s = server.accept();
	} else {
	    ObjectInputStream is = new ObjectInputStream(new BufferedInputStream(in));
	    InetAddress raddr;
	    try {
		raddr = (InetAddress)is.readObject();
	    } catch (ClassNotFoundException e) {
		throw new Error(e);
	    }
	    int rport = is.readInt();
	    s = createClientSocket(raddr, rport);
	}
	return s;
    }
}
