<project
    name="native"
    default="native-compile"
    basedir=".">

    <description>
	Target definitions for javah and native compile under the current directory.
    </description>

    <!--
	Target definition for javah.

	Requires prior inclusion of ${ibis}/build-files/build-properties.xml

	Requires definition of the following properties:
	build                  the root of the build tree to be javah'd
	default.classpath      refid of sensible default classpath
    -->

    <target name="property-javah-build"
	    depends="property-init"
	    unless="build">
	<echo message="build is undefined. Set it to the default value"/>
	<property name="build" location="build"/>
	<mkdir dir="${build}"/>
    </target>

    <target name="javah-init"
	    depends="property-javah-build,property-init">
	<mkdir dir="${build}/include"/>
	<echo level="warning" message="default.classpath = ${default.classpath}"/>
    </target>


    <target name="-one-javah">
	<!--
	-->
	<echo	level="debug"
		message="Invoke javah for ${native.class} if it is out of date"/>

	<echo message="${native.class}" file="${build}/include/name-tmp"/>

	<replace
		file="${build}/include/name-tmp"
		token="."
		value="_"/>
	<property name="include.path" location="${build}/include/"/>
	<loadfile
		property="include-class-name"
		srcFile="${build}/include/name-tmp"/>
	<replace
		file="${build}/include/name-tmp"
		token="${include-class-name}"
		value="${include.path}${file.separator}${include-class-name}.h"/>
	<loadfile
		property="include-file-name"
		srcFile="${build}/include/name-tmp"/>

	<echo message="${native.class}" file="${build}/include/name-tmp"/>
	<replace
		file="${build}/include/name-tmp"
		token="."
		value="${file.separator}"/>
	<loadfile
		property="class-name"
		srcFile="${build}/include/name-tmp"/>
	<replace
		file="${build}/include/name-tmp"
		token="${class-name}"
		value="${build}${file.separator}${class-name}.class"/>
	<loadfile
		property="class-file-name"
		srcFile="${build}/include/name-tmp"/>

	<!-- <delete file="${build}/include/name-tmp"/> -->
	<echo	level="debug"
		message="I think class file name for ${native.class} is ${class-file-name}"/>
	<echo	level="debug"
		message="I think include file name for ${native.class} is ${include-file-name}"/>

	<outofdate>
	    <sourcefiles>
		<pathelement path="${class-file-name}"/>
	    </sourcefiles>
	    <targetfiles>
		<pathelement path="${include-file-name}"/>
	    </targetfiles>

	    <sequential>
		<echo	level="debug"
			message="Invoke javah for one class: ${native.class}"/>
		<javah destdir="${build}/include" verbose="false">
		    <class name="${native.class}"/>
		    <classpath refid="default.classpath"/>
		</javah>
	    </sequential>
	</outofdate>
    </target>


    <target name="find-natives"
	    depends="javah-init">
	    <!-- commented out, not toplevel
	    description="Locate classes with native methods in the build tree"
	    -->
	<path id="all-classes">
	    <fileset dir="${build}">
		<include name="**/*.class"/>
	    </fileset>
	</path>
	<pathconvert pathsep=" " property="classes.all" refid="all-classes">
	    <map from="${build}${file.separator}" to=""/>
	</pathconvert>
	<pathconvert
		pathsep="${path.separator}"
		property="class-files.all"
		refid="all-classes"/>
	<echo	level="debug"
		message="Consider this path for outofdate: ${class-files.all}"/>
	<!--
	-->
	<outofdate>
	    <sourcefiles>
		<pathelement path="${class-files.all}"/>
	    </sourcefiles>
	    <targetfiles>
		<pathelement path="${build}/NativeMethodClasses"/>
	    </targetfiles>

	    <sequential>
		<echo	level="debug"
			message="List of all class files: ${classes.all}"/>
		<echo	level="debug"
			message="File separator is ${file.separator}"/>

		<java   classname="ibis.frontend.io.CheckNativeMethods"
			taskname="CheckNativeMethods"
			dir="${build}"
			output="${build}/NativeMethodClasses"
			failonerror="true"
			fork="true">
		    <arg line="${classes.all}"/>
		    <classpath refid="default.classpath"/>
		</java>

		<!--
		    Do regexp on ${build}/NativeMethodClasses:
			%s/.class//
			%s/\${file.separator}/./g
			%s/\${line.separator}/,/g
			%s/\n/,/g
			%s/  */ /g
			%s/,$//g
		-->
		<replaceregexp
			byline="true"
			file="${build}/NativeMethodClasses"
			match=".class"
			replace=""/>
		<replaceregexp
			byline="true"
			file="${build}/NativeMethodClasses"
			flags="g"
			match="\${file.separator}"
			replace="."/>
		<replaceregexp
			file="${build}/NativeMethodClasses"
			flags="g"
			match="\${line.separator}"
			replace=","/>
		<replaceregexp
			file="${build}/NativeMethodClasses"
			flags="g"
			match="  *"
			replace=""/>
		<replaceregexp
			file="${build}/NativeMethodClasses"
			flags="g"
			match=",$"
			replace=""/>
	    </sequential>
	</outofdate>
    </target>


    <target name="javah"
	    depends="javah-init,find-natives">
	    <!-- commented out; not toplevel
	    description="Invoke javah over classes listed in ${build}/NativeMethodClasses"
	    -->
	<loadfile
		property="classes.native"
		srcFile="${build}/NativeMethodClasses">
	    <!--
	    <filterchain>
		<prefixlines prefix=","/>
		<striplinebreaks/>
	    </filterchain>
	    -->
	</loadfile>
	<echo level="verbose" message="classes.native = ${classes.native}"/>
	<if>
	    <isset property="classes.native"/>
	<then>
	    <foreach
		    list="${classes.native}"
		    delimiter=","
		    target="-one-javah"
		    param="native.class"
		    inheritall="true"
		    inheritrefs="true"
		    />
	</then>
	</if>
    </target>


    <!--
	Target to Compile natives in this directory

	Requires prior definition of following properties:
	    native.dir		the directory of this build
	    ibis		the root of the ibis source tree
	    native-path		${native.dir} relative to ${ibis}
	    build		the root of the ibis build tree
	    default.classpath	a ref property with default classpath

	The shared target definitions require you to define:
	    local.includes	a property that contains include paths specific
				to this module

	Optional:
	    local.lib		the truncated name of the lib you want to create

    -->

    <taskdef resource="cpptasks.tasks"/>
    <typedef resource="cpptasks.types"/>

    <target name="property-compiler-init">

	<if>
	    <isset property="c.debug"/>
	    <then>
		<property name="c.debug.value" value="true"/>
	    </then>
	    <else>
		<property name="c.debug.value" value="false"/>
	    </else>
	</if>

	<if>
	    <os family="unix"/>
	    <then>
		<property name="c.compiler" value="${c.compiler.unix}"/>
		<if>
		    <equals arg1="${c.optimization}" arg2="optimize"/>
		    <then>
			<property name="c.optimize" value="${c.optimize.unix}"/>
		    </then>
		</if>
	    </then>
	<elseif>
	    <os family="windows"/>
	    <then>
		<property name="c.compiler" value="${c.compiler.windows}"/>
		<if>
		    <equals arg1="${c.optimization}" arg2="optimize"/>
		    <then>
			<property name="c.optimize" value="${c.optimize.windows}"/>
		    </then>
		</if>
	    </then>
	</elseif>
	<elseif>
	    <os family="mac"/>
	    <then>
		<property name="c.compiler" value="${c.compiler.mac}"/>
		<if>
		    <equals arg1="${c.optimization}" arg2="optimize"/>
		    <then>
			<property name="c.optimize" value="${c.optimize.mac}"/>
		    </then>
		</if>
	    </then>
	</elseif>
	</if>

    </target>


    <target name="property-native-outtype"
	    depends="property-init"
	    unless="cc.outtype">
	<echo	level="debug"
		message="cc.outtype is undefined. Set it to the default value"/>
	<property name="cc.outtype" value="shared"/>
    </target>

    <target name="property-native-build"
	    depends="property-init"
	    unless="build">
	<echo	level="debug"
		message="build is undefined. Set it to the default value"/>
	<property name="build" location="build"/>
	<mkdir dir="${build}"/>
    </target>

    <target name="property-native-local.lib" unless="local.lib">
	<echo message="local.lib is undefined. Set it to the default value"/>
	<property name="local.lib" value="ibis"/>
    </target>


    <target name="native-init"
	    depends="property-native-build,
		     property-native-local.lib,
		     property-native-outtype,
		     property-compiler-init">
	<mkdir dir="${build}"/>
	<mkdir dir="${build}/include"/>
	<mkdir dir="${build}/lib"/>

	<path id="default.includes-ref">
	    <pathelement path="${JAVA_HOME}/include"/>
	    <pathelement path="${JAVA_HOME}/include/linux"/>
	    <pathelement path="${JAVA_HOME}/include/win32"/>
	    <pathelement path="${JAVA_HOME}/include/solaris"/>
	    <pathelement path="${JAVA_HOME}/../1.3.1/Headers"/>
	    <pathelement path="${build}/include"/>
	    <pathelement path="${native.dir}"/>
	</path>
	<property name="default.includes" refid="default.includes-ref"/>

	<echo	message="native.dir = ${native.dir}"
		level="verbose"/>
	<echo message="default.includes = ${default.includes}"
		level="verbose"/>
	<pathconvert pathsep=" " property="native-path">
	    <path>
		<pathelement path="${native.dir}"/>
	    </path>
	    <map from="${ibis}${file.separator}" to=""/>
	</pathconvert>

	<propertyregex
	       input="${native-path}"
	       property="native-rel-path"
	       regexp="src\${file.separator}"
	       replace=""/>
	<echo level="verbose" message="native-path ${native-path}"/>
	<echo level="verbose" message="native-rel-path ${native-rel-path}"/>

	<mkdir dir="${build}/${native-rel-path}"/>

	<!--
	    Do regexp from ${native-path} -> ${package}
		%s/\${file.separator}/_/g
		%s/^/ibis_/
	-->
	<property
		name="native-package"
		location="${build}/${native-rel-path}/package"/>
	<echo message="${native-path}" file="${native-package}"/>
	<replaceregexp
		byline="true"
		file="${native-package}"
		flags="g"
		match="\${file.separator}"
		replace="_"/>
	<replaceregexp
		byline="true"
		file="${native-package}"
		match=""
		replace="ibis_"/>
	<loadfile
		property="package"
		srcFile="${native-package}"/>

	<property name="local.lib" value="${package}"/>

	<taskdef
		name="maplibrary"
		classname="MapLibraryName"
		classpath="${ibis}/ant-tasks/tasks"/>
    </target>


    <!--
	Invoke this target to compile the .c files in directory ${native.dir}
    -->
    <target name="native-compile"
	    depends="native-init">

	<echo message="Invoke cc in ${native.dir}${file.separator}"/>
	<if>
	    <isreference refid="local.libset-ref"/>
	    <then>
		<property name="local.libset" refid="local.libset-ref"/>
		<!--
		<echo message="Specify extra libs ${local.libset}"/>
		<echo message="Specify extra libs ref ${local.libset-ref}"/>
		-->
	    </then>
	</if>

	<maplibrary property="library.path" name="${build}/lib/${local.lib}"/>

	<outofdate>
	    <sourcefiles>
		<fileset dir="${native.dir}" includes="*.c"/>
	    </sourcefiles>
	    <targetfiles>
		<pathelement path="${library.path}"/>
	    </targetfiles>

	    <sequential>

		<cc	debug="${c.debug}"
			objdir="${build}/${native-rel-path}"
			outfile="${build}/lib/${local.lib}"
			outtype="${cc.outtype}"
			libtool="${use-libtool}"
			name="${c.compiler}"			
			warnings="severe">
		    <fileset dir="${native.dir}" includes="*.c" unless="native.src"/>
		    <fileset dir="${native.dir}" includes="${native.src}" if="native.src"/>
		    <defineset>
			<define name="NDEBUG" if="c.optimize"/>
		    </defineset>
		    <compilerarg value="${c.optimize}" if="c.optimize"/>
		    <includepath>
			<pathelement path="${local.includes}"/>
			<pathelement path="${default.includes}"/>
		    </includepath>
		    <libset refid="local.libset-ref" if="local.libset"/>
		    <!-- <compilerarg location="mid" value="-E"/> -->
		    <!-- <compilerarg location="mid" value="-v"/> -->
		</cc>

		<if>
		    <os family="mac"/>
		    <then>
			<if>
			    <equals arg1="${cc.outtype}" arg2="shared"/>
			    <then>
				<propertyregex
					input="${library.path}"
					property="mac-lib"
					regexp=".jnilib"
					replace=".dylib"/>
				<copy	file="${mac-lib}"
					tofile="${library.path}"/>
			    </then>
			<elseif>
			    <equals arg1="${cc.outtype}" arg2="plugin"/>
			    <then>
				<propertyregex
					input="${library.path}"
					property="mac-lib"
					regexp=".jnilib"
					replace=".bundle"/>
				<copy	file="${mac-lib}"
					tofile="${library.path}"/>
			    </then>
			</elseif>
			</if>
		    </then>
		</if>

	    </sequential>
	</outofdate>
    </target>


    <!--
	Invoke this target to compile the .c files in the current
	directory
    -->
    <target name="native"
	    depends="native-init,native-compile"/>
	    <!-- commented out; not toplevel
	    description="Compile native files in the current directory"
	    -->
    <!--
    <target name="native"
	    depends="native-init"
	    description="Compile native files in the current directory">
	<ant inheritAll="false" dir="." antfile="build-native.xml" target="native-compile">
	    <property name="native.dir" value="."/>
	    <property name="build" value="${build}"/>
	    <property name="ibis" value="${ibis}"/>
	    <property name="optimization" value="${optimization}"/>
	</ant>
    </target>
    -->

</project>
