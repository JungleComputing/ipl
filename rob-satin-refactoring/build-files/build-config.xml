<project
    name="build-config"
    default="configure"
    basedir=".">

    <description>
      Install-time configuration.
      Figure out where the packages are that we depend on.
    </description>

    <target name="config.previous"
	    depends="config-set-os"
	    if="config.has-previous">
	<echo message="Read previous configuration from build-properties.cache"/>
	<property file="build-properties.cache"/>
    </target>

    <target name="config.workstation"
	    depends="config-set-os"
	    if="config.is-workstation">
	<property
		name="default.home.panda"
		location="/usr/local/VU/panda/panda4.0"/>
	<property
		name="default.home.daslib"
		location="/usr/local/VU/daslib"/>
	<property
		name="default.home.lfc"
		location="/usr/local/VU/lfc/lfc-gm"/>
	<property
		name="default.home.mpi"
		location="/usr/local/mpich/mpich-gm"/>
	<property
		name="default.home.gm"
		location="/usr/local/gm/current"/>
    </target>

    <target name="config.mac"
	    depends="config-set-os"
	    if="config.os-is-mac">
	<echo message="Yep, this is a mac"/>
    </target>

    <target name="config-workstation">
	<condition property="config.has-previous">
	    <available file="build-properties.cache"/>
	</condition>
	<condition property="config.is-workstation">
	    <not>
		<isset property="config.has-previous"/>
	    </not>
	</condition>
    </target>

    <target name="config-set-os" depends="config-workstation">
	<condition property="config.os-is-unix"    value="true">
	    <os family="unix"/>
	</condition>
	<condition property="config.os-is-windows" value="true">
	    <os family="windows"/>
	</condition>
	<condition property="config.os-is-mac"     value="true">
	    <os family="mac"/>
	</condition>
    </target>

    <target name="java-version-test">
	<if>
	    <and>
		<not>
		    <contains string="${java.version}" substring="1.4"/>
		</not>
		<not>
		    <contains string="${java.version}" substring="1.5"/>
		</not>
		<not>
		    <contains string="${java.version}" substring="1.6"/>
		</not>
	    </and>
	    <then>
		<fail message="Java version ${java.version} is not supported. A 1.4 or 1.5 version is required for Ibis.">
		</fail>
	    </then>
	</if>
    </target>

    <target name="java-home-test" unless="env.JAVA_HOME">
	<fail>Environment variable JAVA_HOME is not set!</fail>
    </target>

    <target name="config-init"
	    depends="java-home-test,java-version-test,config.workstation,config.mac,config.previous">
	<property name="JAVA_HOME_ENV" value="${env.JAVA_HOME}"/>
    </target>

    <property environment="env"/>

    <property name="ant.home" location="3rdparty/apache-ant-1.6.1"/>

    <property name="karmi" location="${ibis}/../karmi/karmi-transport-1.07g"/>

    <target name="-config-build-properties">
	<if>
	    <isset property="called-from-configure"/>
	    <then>
	    </then>
	    <else>
		<echo>
----------------------------------------------------------------
Now, your Ibis build is being configured under ${ibis}.

If you don't have any fast local networks for which a special
Ibis module is required, you may skip the following message
by just waiting for 30 seconds, after which the build will continue.

If you wish to configure Ibis modules for fast local networks,
you have to do some extra configuration. To do so,
first interrupt this build, and then type:
  ant configure
to the command line, and answer questions.
After you did this optional configuration, you must again type:
  ant
to the command line.
If you don't know the answer, or don't have the native modules
that the fast local network module depends on, just waiting for
30 seconds is usually OK.
----------------------------------------------------------------
</echo>
		<sleep seconds="30"/>
	    </else>
	</if>

	<property name="config.home.ibis" location="${ibis}"/>

	<condition property="config.home.gm-s" value="${default.home.gm}">
	    <equals arg1="${install.home.gm}" arg2=""/>
	</condition>
	<condition property="config.home.gm-s" value="${install.home.gm}">
	    <not>
		<equals arg1="${install.home.gm}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.gm"
		location="${config.home.gm-s}"/>

	<condition property="config.home.daslib-s" value="${default.home.daslib}">
	    <equals arg1="${install.home.daslib}" arg2=""/>
	</condition>
	<condition property="config.home.daslib-s" value="${install.home.daslib}">
	    <not>
		<equals arg1="${install.home.daslib}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.daslib"
		location="${config.home.daslib-s}"/>

	<condition property="config.home.lfc-s" value="${default.home.lfc}">
	    <equals arg1="${install.home.lfc}" arg2=""/>
	</condition>
	<condition property="config.home.lfc-s" value="${install.home.lfc}">
	    <not>
		<equals arg1="${install.home.lfc}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.lfc"
		location="${config.home.lfc-s}"/>

	<condition property="config.home.panda-s" value="${default.home.panda}">
	    <equals arg1="${install.home.panda}" arg2=""/>
	</condition>
	<condition property="config.home.panda-s" value="${install.home.panda}">
	    <not>
		<equals arg1="${install.home.panda}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.panda"
		location="${config.home.panda-s}"/>

	<condition property="config.home.mpi-s" value="${default.home.mpi}">
	    <equals arg1="${install.home.mpi}" arg2=""/>
	</condition>
	<condition property="config.home.mpi-s" value="${install.home.mpi}">
	    <not>
		<equals arg1="${install.home.mpi}" arg2=""/>
	    </not>
	</condition>
	<property name="config.home.mpi"
		location="${config.home.mpi-s}"/>

	<delete file="build-properties.cache"/>
	<echo	file="build-properties.cache"
		append="true">default.home.panda  = ${default.home.panda}
</echo>
	<echo	file="build-properties.cache"
		append="true">default.home.daslib = ${default.home.daslib}
</echo>
	<echo	file="build-properties.cache"
		append="true">default.home.lfc    = ${default.home.lfc}
</echo>
	<echo	file="build-properties.cache"
		append="true">default.home.mpi    = ${default.home.mpi}
</echo>
	<echo	file="build-properties.cache"
		append="true">default.home.gm     = ${default.home.gm}
</echo>
	<replace
		file="${ibis}/build-properties.cache"
		token="${file.separator}"
		value="/"/>

	<copy	file="${ibis}/build-properties"
		tofile="${ibis}/build-properties.backup"
		failonerror="false"
		overwrite="true">
	</copy>
	<copy	file="${ibis}/src/scripts/build-properties.in"
		tofile="${ibis}/build-properties"
		overwrite="true">
	</copy>

	<replace
		file="${ibis}/build-properties"
		token="@JAVA@"
		value="${JAVA_HOME_ENV}"/>
	<replace
		file="${ibis}/build-properties"
		token="@IBIS@"
		value="${config.home.ibis}"/>
	<replace
		file="${ibis}/build-properties"
		token="@GM_HOME@"
		value="${config.home.gm}"/>
	<replace
		file="${ibis}/build-properties"
		token="@DASLIB_HOME@"
		value="${config.home.daslib}"/>
	<replace
		file="${ibis}/build-properties"
		token="@LFC_HOME@"
		value="${config.home.lfc}"/>
	<replace
		file="${ibis}/build-properties"
		token="@PANDA_HOME@"
		value="${config.home.panda}"/>
	<replace
		file="${ibis}/build-properties"
		token="@MPI_HOME@"
		value="${config.home.mpi}"/>
	<replace
		file="${ibis}/build-properties"
		token="@KARMI@"
		value="${karmi}"/>
	<replace
		file="${ibis}/build-properties"
		token="${file.separator}"
		value="/"/>

	<!--
	==============================================================
	    Generate configuration.sh, on windows too, for it could be Cygwin.
	-->

	<condition property="JIT_OPTS" value="${env.JIT_OPTS}">
	    <isset property="env.JIT_OPTS"/>
	</condition>
	<condition property="JIT_OPTS" value="">
	    <not>
		<isset property="env.JIT_OPTS"/>
	    </not>
	</condition>

	<property name="config.javac" location="${JAVA_HOME_ENV}/bin/javac"/>

	<mkdir dir="${ibis}/bin"/>
	<echo
		file="${ibis}/configuration.sh">#!/bin/bash
# Shell variables to describe Ibis configuration
JAVA_ROOT="${JAVA_HOME_ENV}"
# JAVA_ROOT=/usr/local/ibm-java/IBMJava2-141
# JAVA_ROOT=/usr/local/sun-java/jdk1.4
# JAVA_ROOT=/usr/local/sun-java/j2sdk1.5.0
JAVAC="${config.javac}"
JIT_OPTS="${JIT_OPTS}"
IBIS_ROOT="${ibis}"
MANTA_ROOT=/usr/local/VU/manta
BCEL="${package.home.bcel}"
KARMI="${karmi}"
IBIS_CONFIG_SEEN=1
</echo>


	<copy
		file="${ibis}/src/scripts/ns-env.in"
		tofile="${ibis}/bin/ns-env"/>
	<replace file="${ibis}/bin/ns-env" token="@IBIS_NS_PORT@" value="9826"/>
	<replace file="${ibis}/bin/ns-env" token="@IBIS_NS_HOST@" value="localhost"/>
	<chmod file="${ibis}/bin/ns-env" perm="+x"/>

	<if>
	    <os family="windows"/>
	    <then>
		<echo
		    file="${ibis}/configuration.bat">@rem Windows cmd variables to describe Ibis configuration
@set JAVA_ROOT=${JAVA_HOME_ENV}
@rem JAVA_ROOT=/usr/local/ibm-java/IBMJava2-141
@rem JAVA_ROOT=/usr/local/sun-java/jdk1.4
@rem JAVA_ROOT=/usr/local/sun-java/j2sdk1.5.0
@set JAVAC=${config.javac}
@set JIT_OPTS=${JIT_OPTS}
@set IBIS_ROOT=${ibis}
@set MANTA_ROOT=/usr/local/VU/manta
@set BCEL=${package.home.bcel}
@set KARMI=${karmi}
@set IBIS_CONFIG_SEEN=1
</echo>

		<copy
			file="${ibis}/src/scripts/ns-env.in"
			tofile="${ibis}/bin/ns-env.bat">
		</copy>
		<replace file="${ibis}/bin/ns-env.bat" token="@IBIS_NS_PORT@" value="9826"/>
		<replace file="${ibis}/bin/ns-env.bat" token="@IBIS_NS_HOST@" value="localhost"/>
		<replaceregexp
		    file="${ibis}/bin/ns-env.bat"
			flags="g"
			match="(.*)="
			replace="set \1="/>
		<replace
		    file="${ibis}/bin/ns-env.bat"
			token="#"
			value="rem "/>
		<replace
		    file="${ibis}/bin/ns-env.bat"
			token="export"
			value="rem "/>
	    </then>
	</if>
    </target>


    <target name="-config-lazy-build-properties"
	    unless="build-properties-available">
	<antcall inheritRefs="true" target="-config-build-properties"/>
    </target>


    <target name="config-init-initial" depends="config-init">
	<condition property="build-properties-available">
	    <available file="build-properties"/>
	</condition>
	<antcall inheritRefs="true" target="-config-lazy-build-properties"/>
    </target>


    <target name="property-init-once"
	    depends="property-compiler-init">
    </target>


    <target name="configure"
	    depends="config-init"
	    description="Ibis build configuration for high-speed LAN modules">

	<input
		message="Please enter the install directory of gm: [${default.home.gm}] "
		addproperty="install.home.gm"/>
	<input
		message="Please enter the install directory of daslib: [${default.home.daslib}] "
		addproperty="install.home.daslib"/>
	<input
		message="Please enter the install directory of lfc: [${default.home.lfc}] "
		addproperty="install.home.lfc"/>
	<input
		message="Please enter the install directory of panda: [${default.home.panda}] "
		addproperty="install.home.panda"/>
	<input
		message="Please enter the install directory of mpi: [${default.home.mpi}] "
		addproperty="install.home.mpi"/>

	<property name="called-from-configure" value="true"/>
	<antcall inheritRefs="true" target="-config-build-properties"/>
    </target>

    <target name="proprietary-tasks">
	<mkdir dir="${ibis}/ant-tasks/tasks"/>
	<javac
		srcdir="${ibis}/ant-tasks"
		destdir="${ibis}/ant-tasks/tasks">
	    <include name="**/*.java"/>
	    <classpath refid="default.classpath"/>
	</javac>
    </target>
</project>
