/* $Id$ */

package ibis.frontend.ibis;

import ibis.frontend.generic.RunJavac;

import java.io.File;
import java.util.Vector;

import org.apache.bcel.Repository;

class Ibisc {
    boolean verbose;

    boolean verify;

    boolean keep;

    boolean invocationRecordCache;

    String className;

    boolean inletOpt;

    boolean spawnCounterOpt;

    boolean local;

    IbiscFactory factory;

    Vector targets;

    String packageName;

    Ibisc(boolean local, boolean verbose,
            boolean verify,
            boolean keep, boolean invocationRecordCache,
            Vector targets, String packageName,
            boolean inletOpt, boolean spawnCounterOpt) {

        this.local = local;
        this.verbose = verbose;
        this.verify = verify;
        this.keep = keep;
        this.invocationRecordCache = invocationRecordCache;
        this.targets = targets;
        this.inletOpt = inletOpt;
        this.spawnCounterOpt = spawnCounterOpt;
        this.packageName = packageName;
        factory = new IbiscFactory();
        Repository.registerObserver(factory);
    }

    boolean fileExists(String s) {
        File f = new File(s);
        return f.exists();
    }

    boolean fileNewer(String file1, String file2) {
        File f1 = new File(file1);
        File f2 = new File(file2);
        return f1.lastModified() > f2.lastModified();
    }

    public void start() {
        if (verbose) {
            System.err.println("target: ");
        }
        for (int i = 0; i < targets.size(); i++) {
            if (verbose) {
                System.err.println(" " + targets.get(i));
            }
            doWorkForFile((String) targets.get(i));
        }
    }

    public void doWorkForFile(String javaFile) {
        if (!javaFile.endsWith(".java")) {
            javaFile = javaFile + ".java";
        }

        if (!fileExists(javaFile)) {
            System.err.println("File " + javaFile + " does not exist.");
            System.exit(1);
        }

        RunJavac.runJavac(new String[] {javaFile}, verbose);

        // We should have bytecode now.
        className = javaFile.substring(0, javaFile.length() - 5);
        if (verbose) {
            System.out.println("className = " + className);
        }

        if (packageName.equals("")) {
            Repository.lookupClass(className);
        } else {
            Repository.lookupClass(packageName + "." + className);
        }

        // Run satinc.
        new ibis.frontend.satin.Satinc(verbose, local, verify, keep,
                invocationRecordCache, className, inletOpt,
                spawnCounterOpt).start();

        // Now generate serialization code for all classes, including
        // the classes generated by satinc.
        if (verbose) {
            System.out.println("running io generator on all files");
        }

        new ibis.frontend.io.IOGenerator(verbose, local, false, false,
                verify, false).scanClass(factory.getList());

        if (verbose) {
            System.out.println(" Done");
        }

        // for (int i=0; i<factory.getList().size(); i++) {
        //     System.out.println("loadlist: " + factory.getList().get(i));
        // }
    }

    public static void usage() {
        System.err.println("Usage : ibisc [-v] [-verify] [-keep] "
                + "[-irc-off] "
                + "[-no-inlet-opt] [-no-sc-opt] [-package] "
                + "<java file(s)>");
        System.exit(1);
    }

    public static void main(String[] args) {
        boolean verbose = false;
        boolean keep = false;
        boolean verify = false;
        boolean invocationRecordCache = true;
        boolean inletOpt = true;
        boolean spawnCounterOpt = true;
        Vector targets = new Vector();
        String packageName = "";
        boolean local = true;

        for (int i = 0; i < args.length; i++) {
            if (args[i].equals("-v")) {
                verbose = true;
            } else if (args[i].equals("-verify")) {
                verify = true;
            } else if (!args[i].startsWith("-")) {
                targets.add(args[i]);
            } else if (args[i].equals("-package")) {
                packageName = args[i + 1];
                i++;
            } else if (args[i].equals("-keep")) {
                keep = true;
            } else if (args[i].equals("-dir")) {
                local = false;
            } else if (args[i].equals("-local")) {
                local = true;
            } else if (args[i].equals("-irc-off")) {
                invocationRecordCache = false;
            } else if (args[i].equals("-no-inlet-opt")) {
                inletOpt = false;
            } else if (args[i].equals("-no-sc-opt")) {
                spawnCounterOpt = false;
            } else {
                usage();
            }
        }

        if (targets.size() == 0) {
            usage();
        }

        new Ibisc(local, verbose, verify, 
                keep, invocationRecordCache, targets,
                packageName,
                inletOpt, spawnCounterOpt).start();
    }
}
